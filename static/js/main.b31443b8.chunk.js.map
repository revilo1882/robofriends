{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/Header.js","actions.js","api/api.js","constants.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","robot","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","this","setState","Component","Header","requestRobots","dispatch","link","fetch","then","response","json","data","payload","catch","error","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","event","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"sSAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC5B,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACC,4BAAKF,GACL,2BAAIC,MCcOK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,OACC,6BAEEA,EAAOC,KAAI,SAACC,GACX,OACC,kBAAC,EAAD,CACCC,IAAKD,EAAMP,GACXA,GAAIO,EAAMP,GACVF,KAAMS,EAAMT,KACZC,MAAOQ,EAAMR,aCELU,EAbG,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,aACpB,OACC,yBAAKT,UAAU,OACd,2BACCA,UAAU,mCACVU,KAAK,SACLC,YAAY,gBACZC,SAAYH,MCCDI,EARA,SAACC,GACf,OACC,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnEJ,EAAMK,WCmBKC,E,kDApBd,WAAYN,GAAQ,IAAD,8BAClB,cAAMA,IACDO,MAAQ,CACZC,UAAU,GAHO,E,gEAQlBC,KAAKC,SAAS,CAAEF,UAAU,M,+BAI1B,OAAIC,KAAKF,MAAMC,SACP,oDAGDC,KAAKT,MAAMK,a,GAjBQM,aCObC,EARA,WACd,OACC,6BACC,wBAAI1B,UAAU,MAAd,kBCQU2B,G,MAAgB,kBAAM,SAACC,GCbb,IAACC,EDcvBD,EAAS,CAAElB,KEZ0B,4BDFdmB,EDef,6CCdRC,MAAMD,GAAME,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WDepCF,MAAK,SAACG,GAAD,OAAUN,EAAS,CAAElB,KEbS,yBFaqByB,QAASD,OACjEE,OAAM,SAACC,GAAD,OAAWT,EAAS,CAAElB,KEbM,wBFauByB,QAASE,UGS/DC,E,kLAEJf,KAAKT,MAAMyB,oB,+BAGF,IAAD,EACkDhB,KAAKT,MAAvD0B,EADA,EACAA,YAAaC,EADb,EACaA,eAAgBrC,EAD7B,EAC6BA,OAAQsC,EADrC,EACqCA,UACvCC,EAAiBvC,EAAOwC,QAAO,SAACtC,GACrC,OAAOA,EAAMT,KAAKgD,cAAcC,SAASN,EAAYK,kBAGtD,OACC,yBAAK7C,UAAU,MACd,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWS,aAAcgC,IACzB,kBAAC,EAAD,KACGC,EAAY,uCACb,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUtC,OAAQuC,W,GAlBPlB,aA4BHsB,eA1CS,SAAA1B,GAAK,MAAK,CACjCmB,YAAanB,EAAM2B,aAAaR,YAChCpC,OAAQiB,EAAMM,cAAcvB,OAC5BsC,UAAWrB,EAAMM,cAAce,UAC/BL,MAAOhB,EAAMM,cAAcU,UAKD,SAACT,GAAD,MAAe,CACzCa,eAAgB,SAACQ,GAAD,OAAWrB,EHda,CACxClB,KETkC,sBFUlCyB,QGYmDc,EAAMC,OAAOC,SAChEZ,gBAAiB,kBAAMX,EAASD,SA+BlBoB,CAA6CT,GC1CtDc,EAAcC,QACU,cAA7BC,OAAOC,SAASC,UAEc,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACxB,2DAsCH,SAASC,EAAgBC,EAAOC,GAC/BC,UAAUC,cACRC,SAASJ,GACT5B,MAAK,SAAAiC,GACLA,EAAaC,cAAgB,WAC5B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACD,cAA3BF,EAAiB7C,QAChBwC,UAAUC,cAAcO,YAI3BC,QAAQC,IACP,iHAKGX,GAAUA,EAAOY,UACpBZ,EAAOY,SAASR,KAMjBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACpBb,EAAOa,UAAUT,WAOtB5B,OAAM,SAAAC,GACNiC,QAAQjC,MAAM,4CAA6CA,MCzF9D,IAAMqC,EAAqB,CAC1BlC,YAAa,IAYRmC,EAAqB,CAC1BjC,WAAW,EACXtC,OAAQ,GACRiC,MAAO,ICXFuC,G,MAASC,0BACTC,EAAcC,YAAgB,CAAE/B,aDFV,WAA8C,IAA7C3B,EAA4C,uDAApCqD,EAAoBM,EAAgB,uDAAP,GACjE,OAAOA,EAAOtE,MACb,IHbiC,sBGchC,OAAOuE,OAAOC,OAAO,GAAI7D,EAAO,CAAEmB,YAAawC,EAAO7C,UACvD,QACC,OAAOd,ICH0CM,cDavB,WAA4C,IAA3CN,EAA0C,uDAAlCsD,EAAoBK,EAAc,uDAAP,GAChE,OAAOA,EAAOtE,MACb,IH1BoC,yBG2BnC,OAAOuE,OAAOC,OAAO,GAAI7D,EAAO,CAAEqB,WAAW,IAC9C,IH3BoC,yBG4BnC,OAAOuC,OAAOC,OAAO,GAAI7D,EAAO,CAAEjB,OAAQ4E,EAAO7C,QAASO,WAAW,IACtE,IH5BmC,wBG6BlC,OAAOuC,OAAOC,OAAO,GAAI7D,EAAO,CAAEgB,MAAO2C,EAAO7C,QAASO,WAAW,IACrE,QACC,OAAOrB,MCrBJ8D,EAAQC,YAAYN,EAAaO,YAAgBC,IAAiBV,IAExEW,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,IAAD,CAAUN,MAAOA,GAChB,kBAAC,EAAD,OAFF,KAKAO,SAASC,eAAe,SFAlB,SAAkB/B,GACxB,GAA6C,kBAAmBC,UAAW,CAG1E,GADkB,IAAI+B,IAAIC,eAAwBvC,OAAOC,SAASuC,MACpDC,SAAWzC,OAAOC,SAASwC,OAIxC,OAGDzC,OAAO0C,iBAAiB,QAAQ,WAC/B,IAAMrC,EAAK,UAAMkC,eAAN,sBAEPzC,IAgEP,SAAiCO,EAAOC,GAEvC9B,MAAM6B,EAAO,CACZsC,QAAS,CAAE,iBAAkB,YAE5BlE,MAAK,SAAAC,GAEL,IAAMkE,EAAclE,EAASiE,QAAQE,IAAI,gBAEpB,MAApBnE,EAASoE,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CxC,UAAUC,cAAcwC,MAAMvE,MAAK,SAAAiC,GAClCA,EAAauC,aAAaxE,MAAK,WAC9BuB,OAAOC,SAASiD,eAKlB9C,EAAgBC,EAAOC,MAGxBxB,OAAM,WACNkC,QAAQC,IACP,oEAvFAkC,CAAwB9C,EAAOC,GAI/BC,UAAUC,cAAcwC,MAAMvE,MAAK,WAClCuC,QAAQC,IACP,iHAMFb,EAAgBC,EAAOC,OEtB3BE,K","file":"static/js/main.b31443b8.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n\treturn (\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Card","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ({ robots }) => {\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map((robot) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card\n\t\t\t\t\t\t\tkey={robot.id}\n\t\t\t\t\t\t\tid={robot.id}\n\t\t\t\t\t\t\tname={robot.name}\n\t\t\t\t\t\t\temail={robot.email}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t)\n}\n\nexport default CardList","import React from 'react'\n\nconst SearchBox = ({ searchChange }) =>  {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\t\ttype='search'\n\t\t\t\tplaceholder='search robots'\n\t\t\t\tonChange = {searchChange}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default SearchBox\n","import React from 'react'\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{ overflow: 'scroll', border: '5px solid black', height: '800px' }}>\n\t\t\t{props.children}\n\t\t</div>\n\t)\n}\n\nexport default Scroll\n","import React, { Component } from 'react'\n\n\nclass ErrorBoundary extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch() {\n\t\tthis.setState({ hasError: true })\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Something went wrong</h1>\n\t\t}\n\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundary\n","import React from 'react'\n\nconst Header = () => {\n\treturn (\n\t\t<div>\n\t\t\t<h1 className='f1'> RoboFriends</h1>\n\t\t</div>\n\t)\n}\n\nexport default Header","import { apiCall } from './api/api'\nimport { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED,\n} from './constants'\n\nexport const setSearchField = (text) => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text,\n})\n\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({ type: REQUEST_ROBOTS_PENDING })\n\tapiCall('https://jsonplaceholder.typicode.com/users')\n\t\t.then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n\t\t.catch((error) => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const apiCall = (link) =>\n\tfetch(link).then(response => response.json())\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport Header from '../components/Header'\nimport './App.css'\n\nimport { setSearchField, requestRobots } from '../actions'\n\n// parameter state comes from index.js provider store state(rootReducers)\nconst mapStateToProps = state => ({\n\tsearchField: state.searchRobots.searchField,\n\trobots: state.requestRobots.robots,\n\tisPending: state.requestRobots.isPending,\n\terror: state.requestRobots.error,\n})\n\n// dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\n// the function returns an object then uses connect to change the data from reducers.\nconst mapDispatchToProps = (dispatch) => ({\n\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\tonRequestRobots: () => dispatch(requestRobots()),\n})\n\nclass App extends Component {\n\tcomponentDidMount() {\n\t\tthis.props.onRequestRobots()\n\t}\n\n\trender() {\n\t\tconst { searchField, onSearchChange, robots, isPending} = this.props\n\t\tconst filteredRobots = robots.filter((robot) => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t})\n\n\t\treturn (\n\t\t\t<div className='tc'>\n\t\t\t\t<Header />\n\t\t\t\t<SearchBox searchChange={onSearchChange}/>\n\t\t\t\t<Scroll>\n\t\t\t\t\t{ isPending ? <h1>Loading</h1> :\n\t\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t\t}\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n// action done from mapDispatchToProps will change state from mapStateToProps\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' },\n\t})\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then(registration => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED,\n} from './constants'\n\nconst initialStateSearch = {\n\tsearchField: '',\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, { searchField: action.payload })\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nconst initialStateRobots = {\n\tisPending: false,\n\trobots: [],\n\terror: '',\n}\n\nexport const requestRobots = (state = initialStateRobots, action={}) => {\n\tswitch(action.type) {\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn Object.assign({}, state, { isPending: true })\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false })\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false })\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { createLogger } from 'redux-logger' \nimport thunkMiddleware from 'redux-thunk' \nimport './index.css'\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker'\nimport { searchRobots, requestRobots } from './reducers'\nimport 'tachyons'\n\nconst logger = createLogger()\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store} >\n\t\t\t<App />\n\t\t</Provider>,\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}